library(caret)
library(AppliedPredictiveModeling)
#  Code from the book
set.seed(1)
x <- runif(100, min = 2, max = 10)
y <- sin(x) + rnorm(length(x)) * .25
sinData <- data.frame(x = x, y = y)
plot(x, y)
## Create a grid of x values to use for prediction
dataGrid <- data.frame(x = seq(2, 10, length = 100))
head(dataGrid)
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
# Show the grid used
svm_parameter_grid
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", kpar = "automatic", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index])
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y")
points(dataGrid$x, prediction, type = "l", col = "red", lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
# Show the grid used
svm_parameter_grid
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", kpar = "automatic", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index])
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y", col = "black")
points(dataGrid$x, prediction, type = "l", col = "red", lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
# Show the grid used
svm_parameter_grid
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", kpar = "automatic", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index])
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y", col = "black", cex = 1.2)
points(dataGrid$x, prediction, type = "l", col = "red", lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
# Setting seed for expand grid
set.seed(1)
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
sigma_values <- data.frame(sigma = c(0.2043268, 0.9977490, 47.74), color = c("red", "blue", "green"))
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y")
for(i in 1:nrow(sigma_values)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index], kpar = list(sigma = sigma_values$sigma[i]))
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
points(dataGrid$x, prediction, type = "l", col = sigma_values$color[i], lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
}
par(mai=c(0,0,0,0))
plot.new()
legend(x = "center", legend = sigma_values$sigma, col = sigma_values$color, lwd=4, cex=1, title = "Sigma Values", horiz = TRUE)
# Setting seed for expand grid
set.seed(1)
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
sigma_values <- data.frame(sigma = c(0.2043268, 0.9977490, 47.74), color = c("red", "blue", "green"))
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y")
for(i in 1:nrow(sigma_values)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index], kpar = list(sigma = sigma_values$sigma[i]))
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
points(dataGrid$x, prediction, type = "l", col = sigma_values$color[i], lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
}
par(mai=c(0,0,0,0))
plot.new()
legend(x = "center", legend = sigma_values$sigma, col = sigma_values$color, lwd=4, cex=1, title = "Sigma Values", horiz = TRUE)
# Setting seed for expand grid
set.seed(1)
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
sigma_values <- data.frame(sigma = c(0.2043268, 0.9977490, 47.74), color = c("red", "blue", "green"))
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y", col = "black", cex = 1.3)
for(i in 1:nrow(sigma_values)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index], kpar = list(sigma = sigma_values$sigma[i]))
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
points(dataGrid$x, prediction, type = "l", col = sigma_values$color[i], lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
}
par(mai=c(0,0,0,0))
plot.new()
legend(x = "center", legend = sigma_values$sigma, col = sigma_values$color, lwd=4, cex=1, title = "Sigma Values", horiz = TRUE)
# Setting seed for expand grid
set.seed(1)
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
sigma_values <- data.frame(sigma = c(0.2043268, 0.9977490, 47.74), color = c("red", "blue", "green"))
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y", col = "black", lwd = 2)
for(i in 1:nrow(sigma_values)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index], kpar = list(sigma = sigma_values$sigma[i]))
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
points(dataGrid$x, prediction, type = "l", col = sigma_values$color[i], lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
}
par(mai=c(0,0,0,0))
plot.new()
legend(x = "center", legend = sigma_values$sigma, col = sigma_values$color, lwd=4, cex=1, title = "Sigma Values", horiz = TRUE)
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
# Show the grid used
svm_parameter_grid
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", kpar = "automatic", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index])
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y", cex = 2)
points(dataGrid$x, prediction, type = "l", col = "red", lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
# Setting the expand grid for the cost and epsilon parameters just like the last Home work
svm_parameter_grid <- expand.grid(costs = 2^c(-2, 0, 2, 8), epsilons = c(.01, .05, .1, .5))
# Show the grid used
svm_parameter_grid
# Intializing the empty result dataframe
result_df <- data.frame(actual = double(), pred = double(), costs = factor(), epsilons = factor())
# Set the screen split
par(mfrow = c(4, 4))
# Looping over the combination of SVM parameter grid
for(index in 1:nrow(svm_parameter_grid)) {
# Setting the seed
set.seed(1)
# Buliding the SVM
rbf_model <- ksvm(x = x, y = y, data = sinData, kernel ="rbfdot", kpar = "automatic", C = svm_parameter_grid$costs[index],
epsilon = svm_parameter_grid$epsilons[index])
# Make the prediction using the model generated
prediction <- predict(rbf_model, newdata = dataGrid)
plot(sinData$x, sinData$y, main = paste("Cost:", toString(svm_parameter_grid$costs[index]), "| Epsilon:", toString(svm_parameter_grid$epsilons[index])),
xlab = "x", ylab = "y", cex = 2)
points(dataGrid$x, prediction, type = "l", col = "red", lwd = 3)
# Create the this iteration result data frame
iter_results <- data.frame(actual = dataGrid$x, pred = prediction, costs = paste("Cost:", toString(svm_parameter_grid$costs[index])),
epsilons = paste("Epsilon:", toString(svm_parameter_grid$epsilons[index])))
result_df <- rbind(result_df, iter_results)
}
# Set the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the KNN model
if(file.exists("models/knn_model_q2.rds")) {
knn_model <- readRDS("models/knn_model_q2.rds")
} else {
knn_model <- train(x = trainingData$x, y = trainingData$y, method = "knn", preProc = c("center", "scale"), tuneLength = 10)
saveRDS(knn_model, "models/knn_model_q2.rds")
}
# Print the model
knn_model
# Plot the model
plot(knn_model)
# Predict the model
knn_pred <- predict(knn_model, newdata = testData$x)
set.seed(200)
trainingData <- mlbench.friedman1(200, sd = 1)
## We convert the 'x' data from a matrix to a data frame
## One reason is that this will give the columns names.
trainingData$x <- data.frame(trainingData$x)
## Look at the data using
featurePlot(trainingData$x, trainingData$y)
## This creates a list with a vector 'y' and a matrix
## of predictors 'x'. Also simulate a large test set to
## estimate the true error rate with good precision:
testData <- mlbench.friedman1(5000, sd = 1)
testData$x <- data.frame(testData$x)
# Set the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the KNN model
if(file.exists("models/knn_model_q2.rds")) {
knn_model <- readRDS("models/knn_model_q2.rds")
} else {
knn_model <- train(x = trainingData$x, y = trainingData$y, method = "knn", preProc = c("center", "scale"), tuneLength = 10)
saveRDS(knn_model, "models/knn_model_q2.rds")
}
# Print the model
knn_model
# Plot the model
plot(knn_model)
# Predict the model
knn_pred <- predict(knn_model, newdata = testData$x)
# Get the test Set performance metrics
postResample(pred = knn_pred, obs = testData$y)
# Create the grid for the network
nn_grid <- expand.grid(.decay = c(0, 0.01, 0.1), .size = 1:10)
# Set the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the model
if(file.exists("models/nnet_model_q2.rds")) {
nnet_model <- readRDS("models/nnet_model_q2.rds")
} else {
nnet_model <- train(x = trainingData$x, y = trainingData$y, tuneGrid = nn_grid, method = "nnet", preProc = c("center", "scale"),
linout = TRUE, trace = FALSE, MaxNWts = 10 * (ncol(trainingData$x)+1) + 10 + 1, maxit=500)
saveRDS(nnet_model, "models/nnet_model_q2.rds")
}
# Print the model
nnet_model
# Plot the model
plot(nnet_model)
# Predict the test set
nnet_pred <- predict(nnet_model, newdata = testData$x)
# Load the data
data(tecator)
absorp_df <- as.data.frame(absorp)
endpoints_df <- as.data.frame(endpoints)
colnames(endpoints_df) = c("mositure", "fat","protein")
# Verify the data is loaded or not
head(absorp_df[1:5])
head(endpoints_df)
# Load the data
data(tecator)
absorp_df <- as.data.frame(absorp)
endpoints_df <- as.data.frame(endpoints)
colnames(endpoints_df) = c("mositure", "fat","protein")
# Verify the data is loaded or not
head(absorp_df[1:5])
head(endpoints_df)
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(endpoints[, 2], p = 0.8, list = FALSE)
absorpTrain <- absorp_df[cv_index, ]
absorpTest <- absorp_df[-cv_index, ]
yTrain <- endpoints_df[cv_index, 2]
yTest <- endpoints_df[-cv_index, 2]
# Setting up the control parameter
ctrl <- trainControl(method = "LGOCV", repeats = 5)
# Set the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the KNN model
if(file.exists("models/knn_model_q3.rds")) {
knn_model <- readRDS("models/knn_model_q3.rds")
} else {
knn_model <- train(x = absorpTrain, y = yTrain, method = "knn", preProc = c("center", "scale"), tuneLength = 10)
saveRDS(knn_model, "models/knn_model_q3.rds")
}
# Print the model
knn_model
# Plot the model
plot(knn_model)
# Predict the model
knn_pred <- predict(knn_model, newdata = absorpTest)
# Setting the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the model
if(file.exists("models/svm_model_q3.rds")) {
svm_model <- readRDS("models/svm_model_q3.rds")
} else {
svm_model <- train(x = absorpTrain, y = yTrain, trControl = ctrl, tuneLength = 14, method = "svmRadial", preProc = c("center","scale"))
saveRDS(svm_model, "models/svm_model_q3.rds")
}
# Print the model
svm_model
# Plot the model
plot(svm_model)
# Make the prediction
svm_pred <- predict(svm_model, newdata = absorpTest)
# Get the performance scores
postResample(pred = svm_pred, obs = yTest)
# Get the performance scores
postResample(pred = svm_pred, obs = yTest)
# Setting the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the model
if(file.exists("models/svm_model_q3.rds")) {
svm_model <- readRDS("models/svm_model_q3.rds")
} else {
svm_model <- train(x = absorpTrain, y = yTrain, trControl = ctrl, tuneLength = 14, method = "svmRadial", preProc = c("center","scale"))
saveRDS(svm_model, "models/svm_model_q3.rds")
}
# Print the model
svm_model
# Plot the model
plot(svm_model)
# Make the prediction
svm_pred <- predict(svm_model, newdata = absorpTest)
# Get the performance scores
postResample(pred = svm_pred, obs = yTest)
data(permeability)
fingerprints_df <- as.data.frame(fingerprints)
head(fingerprints_df[, 1:5])
permeability[1:5]
fingerprints_filtered_df <- fingerprints_df[, -nearZeroVar(fingerprints_df)]
print(paste("Number of predictors left out for modeling is", dim(fingerprints_filtered_df)[2]))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8, list = FALSE)
fingerprintsTrain <- fingerprints_filtered_df[cv_index,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index,]
permeabilityTrain <- permeability[cv_index]
permeabilityTest <- permeability[-cv_index]
# Setting up the control parameter
ctrl <- trainControl(method = "LGOCV")
# Set the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the KNN model
if(file.exists("models/knn_model_q4.rds")) {
knn_model <- readRDS("models/knn_model_q4.rds")
} else {
knn_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "knn", preProc = c("center", "scale"), trControl = ctrl, tuneLength = 10)
saveRDS(knn_model, "models/knn_model_q4.rds")
}
# Print the model
knn_model
# Plot the model
plot(knn_model)
# Predict the model
knn_pred <- predict(knn_model, newdata = fingerprintsTest)
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8, list = FALSE)
fingerprintsTrain <- fingerprints_filtered_df[cv_index,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index,]
permeabilityTrain <- permeability[cv_index]
permeabilityTest <- permeability[-cv_index]
# Setting up the control parameter
ctrl <- trainControl(method = "LGOCV")
# Set the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the KNN model
if(file.exists("models/knn_model_q4.rds")) {
knn_model <- readRDS("models/knn_model_q4.rds")
} else {
knn_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "knn", preProc = c("center", "scale"), trControl = ctrl, tuneLength = 10)
saveRDS(knn_model, "models/knn_model_q4.rds")
}
# Print the model
knn_model
# Plot the model
plot(knn_model)
# Predict the model
knn_pred <- predict(knn_model, newdata = fingerprintsTest)
# Create the tune grid
tune_grid <- expand.grid(.degree = 1:3, .nprune = 2:38)
# Setting the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the model
if(file.exists("models/mars_model_q4.rds")) {
mars_model <- readRDS("models/mars_model_q4.rds")
} else {
mars_model <- train(x = fingerprintsTrain, y = permeabilityTrain, trControl = ctrl, tuneGrid = tune_grid, method = "earth")
saveRDS(mars_model, "models/mars_model_q4.rds")
}
# Print the model
mars_model
# Plot the model
plot(mars_model)
# Make the prediction
mars_pred <- predict(mars_model, newdata = fingerprintsTest)
# Get the performance scores
postResample(pred = svm_pred, obs = permeabilityTest)
# Setting the seed
set.seed(1)
# Check the file exists and load to variables
# else bulid and store the model
if(file.exists("models/svm_model_q4.rds")) {
svm_model <- readRDS("models/svm_model_q4.rds")
} else {
svm_model <- train(x = fingerprintsTrain, y = permeabilityTrain, tuneLength = 14, method = "svmRadial",
trControl = ctrl, preProc = c("center","scale"))
saveRDS(svm_model, "models/svm_model_q4.rds")
}
# Print the model
svm_model
# Plot the model
plot(svm_model)
# Make the prediction
svm_pred <- predict(svm_model, newdata = fingerprintsTest)
# Get the performance scores
postResample(pred = svm_pred, obs = permeabilityTest)
tune_grid <- expand.grid(.degree = 1:3, .nprune = 2:38)
set.seed(1)
if(file.exists("models/mars_model_q4.rds")) {
mars_model <- readRDS("models/mars_model_q4.rds")
} else {
mars_model <- train(x = fingerprintsTrain, y = permeabilityTrain, trControl = ctrl, tuneGrid = tune_grid, method = "earth")
saveRDS(mars_model, "models/mars_model_q4.rds")
}
mars_model
plot(mars_model)
