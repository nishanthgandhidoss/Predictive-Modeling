# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
set.seed(1)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- 1 - (sum((permeabilityTest-pls_pred)^2)/sum((permeabilityTest-mean(permeabilityTest))^2))
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
data(permeability)
fingerprints_df <- as.data.frame(fingerprints)
head(fingerprints_df[, 1:5])
permeability[1:5]
fingerprints_filtered_df <- fingerprints_df[, -nearZeroVar(fingerprints_df)]
print(paste("Number of predictors left out for modeling is", dim(fingerprints_filtered_df)[2]))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- cor(pls_pred, permeabilityTest, method = "pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- cor(pls_pred, permeabilityTest, method = "pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
pls_pred
# Creating Linear model
lm_model <- train(fingerprintsTrain, permeabilityTrain, method = "lm", trControl = ctrl)
# Finding the root mean square and R^2
lm_pred <- predict(lm_model, fingerprintsTest)
lm_rmse <-RMSE(lm_pred, permeabilityTest)
lm_R2 <- cor(lm_pred, permeabilityTest, method="pearson") ^ 2
# Make the prediction plot
xyplot(permeabilityTest ~ predict(lm_model), type = c("p", "g"), xlab = "Predicted", ylab = "Observed")
# Testset R Squared and rmse
print(paste("The RMSE value for linear model on the train set", round(lm_model$results$RMSE, 4)))
print(paste("The R^2 value for linear model on the train set", round(lm_model$results$Rsquared, 4)))
print(paste("The RMSE value for linear model on the test set", round(lm_rmse, 4)))
print(paste("The R^2 value for linear model on the test set", round(lm_R2, 4)))
# Creating Linear model
lm_model <- train(fingerprintsTrain, permeabilityTrain, method = "lm", trControl = ctrl)
# Finding the root mean square and R^2
lm_pred <- predict(lm_model, fingerprintsTest)
lm_rmse <-RMSE(lm_pred, permeabilityTest)
lm_R2 <- cor(lm_pred, permeabilityTest, method="pearson") ^ 2
# Make the prediction plot
xyplot(permeabilityTest ~ predict(lm_model), type = c("p", "g"), xlab = "Predicted", ylab = "Observed")
# Testset R Squared and rmse
print(paste("The RMSE value for linear model on the train set", round(lm_model$results$RMSE, 4)))
print(paste("The R^2 value for linear model on the train set", round(lm_model$results$Rsquared, 4)))
print(paste("The RMSE value for linear model on the test set", round(lm_rmse, 4)))
print(paste("The R^2 value for linear model on the test set", round(lm_R2, 4)))
set.seed(1)
# Creating Linear model
lm_model <- train(fingerprintsTrain, permeabilityTrain, method = "lm", trControl = ctrl)
# Finding the root mean square and R^2
lm_pred <- predict(lm_model, fingerprintsTest)
lm_rmse <-RMSE(lm_pred, permeabilityTest)
lm_R2 <- cor(lm_pred, permeabilityTest, method="pearson") ^ 2
# Make the prediction plot
xyplot(permeabilityTest ~ predict(lm_model), type = c("p", "g"), xlab = "Predicted", ylab = "Observed")
# Testset R Squared and rmse
print(paste("The RMSE value for linear model on the train set", round(lm_model$results$RMSE, 4)))
print(paste("The R^2 value for linear model on the train set", round(lm_model$results$Rsquared, 4)))
print(paste("The RMSE value for linear model on the test set", round(lm_rmse, 4)))
print(paste("The R^2 value for linear model on the test set", round(lm_R2, 4)))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
set.seed(1)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- cor(pls_pred, permeabilityTest, method = "pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
set.seed(1)
# Creating Linear model
lm_model <- train(fingerprintsTrain, permeabilityTrain, method = "lm", trControl = ctrl)
# Finding the root mean square and R^2
lm_pred <- predict(lm_model, fingerprintsTest)
lm_rmse <-RMSE(lm_pred, permeabilityTest)
lm_R2 <- cor(lm_pred, permeabilityTest, method="pearson") ^ 2
# Make the prediction plot
xyplot(permeabilityTest ~ predict(lm_model), type = c("p", "g"), xlab = "Predicted", ylab = "Observed")
# Testset R Squared and rmse
print(paste("The RMSE value for linear model on the train set", round(lm_model$results$RMSE, 4)))
print(paste("The R^2 value for linear model on the train set", round(lm_model$results$Rsquared, 4)))
print(paste("The RMSE value for linear model on the test set", round(lm_rmse, 4)))
print(paste("The R^2 value for linear model on the test set", round(lm_R2, 4)))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
set.seed(1)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- cor(pls_pred, permeabilityTest, method = "pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
set.seed(1)
# Creating Linear model
lm_model <- train(fingerprintsTrain, permeabilityTrain, method = "lm", trControl = ctrl)
# Finding the root mean square and R^2
lm_pred <- predict(lm_model, fingerprintsTest)
lm_rmse <-RMSE(lm_pred, permeabilityTest)
lm_R2 <- cor(lm_pred, permeabilityTest, method="pearson") ^ 2
# Make the prediction plot
xyplot(permeabilityTest ~ predict(lm_model), type = c("p", "g"), xlab = "Predicted", ylab = "Observed")
# Testset R Squared and rmse
print(paste("The RMSE value for linear model on the train set", round(lm_model$results$RMSE, 4)))
print(paste("The R^2 value for linear model on the train set", round(lm_model$results$Rsquared, 4)))
print(paste("The RMSE value for linear model on the test set", round(lm_rmse, 4)))
print(paste("The R^2 value for linear model on the test set", round(lm_R2, 4)))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
set.seed(1)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- cor(pls_pred, permeabilityTest, method = "pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
# Plot the results
plot(lasso_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
lasso_pred <- predict(lasso_model, as.matrix(fingerprintsTest), s = as.numeric(lasso_model$bestTune))
# Finding the root mean square and R^2
lasso_rmse <-RMSE(permeabilityTest, lasso_pred)
lasso_R2 <- 1 - (sum((permeabilityTest-lasso_pred)^2)/sum((permeabilityTest-mean(permeabilityTest))^2))
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(lasso_model$bestTune), "as fraction value"))
best_param_value <- lasso_model$results[lasso_model$results$fraction == as.numeric(lasso_model$bestTune), ]
print(paste("The RMSE value for lasso model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for lasso model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for lasso model on the test set", round(lasso_rmse, 4)))
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
lasso_R2 <- cor(lasso_pred, permeabilityTest) ^ 2
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
# Plot the results
plot(lasso_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
lasso_pred <- predict(lasso_model, as.matrix(fingerprintsTest), s = as.numeric(lasso_model$bestTune))
# Finding the root mean square and R^2
lasso_rmse <-RMSE(permeabilityTest, lasso_pred)
lasso_R2 <- cor(lasso_pred, permeabilityTest, method="pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(lasso_model$bestTune), "as fraction value"))
best_param_value <- lasso_model$results[lasso_model$results$fraction == as.numeric(lasso_model$bestTune), ]
print(paste("The RMSE value for lasso model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for lasso model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for lasso model on the test set", round(lasso_rmse, 4)))
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
lasso_model
set.seed(1)
cv_index <- createDataPartition(permeability, p = 0.8, list = TRUE)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTrain <- fingerprints_filtered_df[cv_index]
cv_index <- createDataPartition(permeability, p = 0.8, list = FALSE)
fingerprintsTrain <- fingerprints_filtered_df[cv_index]
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8, list = FALSE)
fingerprintsTrain1 <- fingerprints_filtered_df[cv_index]
fingerprintsTest1 <- fingerprints_filtered_df[-cv_index]
permeabilityTrain1 <- permeability[cv_index]
permeabilityTest1 <- permeability[-cv_index]
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8, list = FALSE)
fingerprintsTrain1 <- fingerprints_filtered_df[cv_index]
fingerprintsTest1 <- fingerprints_filtered_df[-cv_index]
permeabilityTrain1 <- permeability[cv_index]
permeabilityTest1 <- permeability[-cv_index]
# Create the grid for the ridge model
ridge_grid <- data.frame(.lambda = seq(0, .3, length = 5))
set.seed(1)
# Create the model
ridge_model <- train(x = fingerprintsTrain1, y = permeabilityTrain1, method = "ridge", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = ridge_grid)
fingerprintsTrain1
fingerprints_filtered_df
cv_index
fingerprintsTrain1 <- fingerprints_filtered_df[cv_index]
fingerprintsTest1 <- fingerprints_filtered_df[-cv_index]
permeabilityTrain1 <- permeability[cv_index]
permeabilityTest1 <- permeability[-cv_index]
ridge_grid <- data.frame(.lambda = seq(0, .3, length = 5))
set.seed(1)
ridge_model <- train(x = fingerprintsTrain1, y = permeabilityTrain1, method = "ridge", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = ridge_grid)
# Create the grid for the ridge model
ridge_grid <- data.frame(.lambda = seq(0, .3, length = 5))
set.seed(1)
# Create the model
ridge_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "ridge", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = ridge_grid)
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
data(permeability)
fingerprints_df <- as.data.frame(fingerprints)
head(fingerprints_df[, 1:5])
permeability[1:5]
fingerprints_filtered_df <- fingerprints_df[, -nearZeroVar(fingerprints_df)]
print(paste("Number of predictors left out for modeling is", dim(fingerprints_filtered_df)[2]))
# Setting the seed for reproduciablity
set.seed(1)
# Performing data spliting
cv_index <- createDataPartition(permeability, p = 0.8)
fingerprintsTrain <- fingerprints_filtered_df[cv_index$Resample1,]
fingerprintsTest <- fingerprints_filtered_df[-cv_index$Resample1,]
permeabilityTrain <- permeability[cv_index$Resample1]
permeabilityTest <- permeability[-cv_index$Resample1]
# Setting up the control parameter
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
set.seed(1)
# Create the model
pls_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"), tuneLength = 40)
# Plot the results
plot(pls_model, type = c("p", "g"), xlab = "Components", ylab = "RMSE")
# Make prediction on the test set
pls_pred <- predict(pls_model, fingerprintsTest, ncomp = as.numeric(pls_model$bestTune))
# Finding the root mean square and R^2
pls_rmse <-RMSE(permeabilityTest, pls_pred)
pls_R2 <- cor(pls_pred, permeabilityTest, method = "pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(pls_model$bestTune), "components"))
print(paste("The RMSE value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$RMSE, 4)))
print(paste("The R^2 value for pls model on the train set", round(pls_model$results[as.numeric(pls_model$bestTune), ]$Rsquared, 4)))
print(paste("The RMSE value for pls model on the test set", round(pls_rmse, 4)))
print(paste("The R^2 value for pls model on the test set", round(pls_R2, 4)))
set.seed(1)
# Creating Linear model
lm_model <- train(fingerprintsTrain, permeabilityTrain, method = "lm", trControl = ctrl)
# Finding the root mean square and R^2
lm_pred <- predict(lm_model, fingerprintsTest)
lm_rmse <-RMSE(lm_pred, permeabilityTest)
lm_R2 <- cor(lm_pred, permeabilityTest, method="pearson") ^ 2
# Make the prediction plot
xyplot(permeabilityTest ~ predict(lm_model), type = c("p", "g"), xlab = "Predicted", ylab = "Observed")
# Testset R Squared and rmse
print(paste("The RMSE value for linear model on the train set", round(lm_model$results$RMSE, 4)))
print(paste("The R^2 value for linear model on the train set", round(lm_model$results$Rsquared, 4)))
print(paste("The RMSE value for linear model on the test set", round(lm_rmse, 4)))
print(paste("The R^2 value for linear model on the test set", round(lm_R2, 4)))
# Create the grid for the ridge model
ridge_grid <- data.frame(.lambda = seq(0, .3, length = 5))
set.seed(1)
# Create the model
ridge_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "ridge", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = ridge_grid)
# Plot the results
plot(ridge_model, type = c("p", "g"), xlab = "Lambda", ylab = "RMSE")
# Make prediction on the test set
ridge_pred <- predict(ridge_model, as.matrix(fingerprintsTest), s = as.numeric(ridge_model$bestTune))
# Finding the root mean square and R^2
ridge_rmse <-RMSE(permeabilityTest, ridge_pred)
ridge_R2 <- 1 - (sum((permeabilityTest-ridge_pred)^2)/sum((permeabilityTest-mean(permeabilityTest))^2))
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(ridge_model$bestTune), "as lambda value"))
best_param_value <- ridge_model$results[ridge_model$results$lambda == as.numeric(ridge_model$bestTune), ]
print(paste("The RMSE value for ridge model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for rigde model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for ridge model on the test set", round(ridge_rmse, 4)))
print(paste("The R^2 value for rigde model on the test set", round(ridge_R2, 4)))
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
# Plot the results
plot(lasso_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
lasso_pred <- predict(lasso_model, as.matrix(fingerprintsTest), s = as.numeric(lasso_model$bestTune))
# Finding the root mean square and R^2
lasso_rmse <-RMSE(permeabilityTest, lasso_pred)
lasso_R2 <- cor(lasso_pred, permeabilityTest, method="pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(lasso_model$bestTune), "as fraction value"))
best_param_value <- lasso_model$results[lasso_model$results$fraction == as.numeric(lasso_model$bestTune), ]
print(paste("The RMSE value for lasso model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for lasso model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for lasso model on the test set", round(lasso_rmse, 4)))
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
# Develop the grid
enetGrid <- expand.grid(.lambda = c(0, 0.01, .1), .fraction = seq(.05, 1, length = 20))
set.seed(1)
# Train the Enet model
enet_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "enet", tuneGrid = enetGrid, trControl = ctrl, preProc = c("center", "scale"))
# Plot the paramter to see the best parameter
plot(enet_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
enet_pred <- predict(enet_model, as.matrix(fingerprintsTest), s = as.numeric(enet_model$bestTune), mode = "fraction")
# Finding the root mean square and R^2
enet_rmse <-RMSE(permeabilityTest, enet_pred)
enet_R2 <- 1 - (sum((permeabilityTest-enet_pred)^2)/sum((permeabilityTest-mean(permeabilityTest))^2))
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(enet_model$bestTune[2]), "as lambda value and", enet_model$bestTune[1], "as fraction value"))
best_param_value <- enet_model$results[enet_model$results$fraction == as.numeric(enet_model$bestTune)[1] & enet_model$results$lambda == as.numeric(enet_model$bestTune)[2], ]
print(paste("The RMSE value for elastic net model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for elastic net model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for elastic net model on the test set", round(enet_rmse, 4)))
print(paste("The R^2 value for elastic net model on the test set", round(enet_R2, 4)))
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
# Plot the results
plot(lasso_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
lasso_pred <- predict(lasso_model, as.matrix(fingerprintsTest), s = as.numeric(lasso_model$bestTune))
# Finding the root mean square and R^2
lasso_rmse <-RMSE(permeabilityTest, lasso_pred)
lasso_R2 <- cor(lasso_pred, permeabilityTest, method="pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(lasso_model$bestTune), "as fraction value"))
best_param_value <- lasso_model$results[lasso_model$results$fraction == as.numeric(lasso_model$bestTune), ]
print(paste("The RMSE value for lasso model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for lasso model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for lasso model on the test set", round(lasso_rmse, 4)))
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
lasso_model
lasso_model$bestTune
lasso_model$results
lasso_model$finalModel
MSE <- best_param_value$RMSE ^ 2
MSE
den <- sum((permeabilityTest-mean(permeabilityTest))^2
)
den
1-(MSE/den)
dim(permeabilityTest)[1]
dim(permeabilityTest)
permeabilityTest
len(permeabilityTest)
length(permeabilityTest)
1-(length(permeabilityTest) * MSE / den)
den <- sum((permeabilityTrain-mean(permeabilityTrain))^2)
1-(length(permeabilityTest) * MSE / den)
# Create the grid for the ridge model
ridge_grid <- data.frame(.lambda = seq(0, .3, length = 5))
set.seed(1)
# Create the model
ridge_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "ridge", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = ridge_grid)
# Plot the results
plot(ridge_model, type = c("p", "g"), xlab = "Lambda", ylab = "RMSE")
# Make prediction on the test set
ridge_pred <- predict(ridge_model, as.matrix(fingerprintsTest), s = as.numeric(ridge_model$bestTune))
# Finding the root mean square and R^2
ridge_rmse <-RMSE(permeabilityTest, ridge_pred)
ridge_R2 <- 1 - (sum((permeabilityTest-ridge_pred)^2)/sum((permeabilityTest-mean(permeabilityTest))^2))
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(ridge_model$bestTune), "as lambda value"))
best_param_value <- ridge_model$results[ridge_model$results$lambda == as.numeric(ridge_model$bestTune), ]
print(paste("The RMSE value for ridge model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for rigde model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for ridge model on the test set", round(ridge_rmse, 4)))
print(paste("The R^2 value for rigde model on the test set", round(ridge_R2, 4)))
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
# Plot the results
plot(lasso_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
lasso_pred <- predict(lasso_model, as.matrix(fingerprintsTest), s = as.numeric(lasso_model$bestTune))
# Finding the root mean square and R^2
lasso_rmse <- RMSE(permeabilityTest, lasso_pred)
lasso_R2 <- cor(lasso_pred, permeabilityTest, method="pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(lasso_model$bestTune), "as fraction value"))
best_param_value <- lasso_model$results[lasso_model$results$fraction == as.numeric(lasso_model$bestTune), ]
print(paste("The RMSE value for lasso model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for lasso model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for lasso model on the test set", round(lasso_rmse, 4)))
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
# Create the grid for the ridge model
lasso_grid <- data.frame(.fraction = seq(0, 1, length = 20))
set.seed(1)
# Create the model
lasso_model <- train(x = fingerprintsTrain, y = permeabilityTrain, method = "lasso", trControl = ctrl, preProcess = c("center", "scale"), tuneGrid = lasso_grid)
# Plot the results
plot(lasso_model, type = c("p", "g"), xlab = "Fraction", ylab = "RMSE")
# Make prediction on the test set
lasso_pred <- predict(lasso_model, as.matrix(fingerprintsTest), s = as.numeric(lasso_model$bestTune))
# Finding the root mean square and R^2
lasso_rmse <- RMSE(permeabilityTest, lasso_pred)
lasso_R2 <- cor(lasso_pred, permeabilityTest, method="pearson") ^ 2
# Print the results and tune parameter
print(paste("The final value used for the model has", as.numeric(lasso_model$bestTune), "as fraction value"))
best_param_value <- lasso_model$results[lasso_model$results$fraction == as.numeric(lasso_model$bestTune), ]
print(paste("The RMSE value for lasso model on the train set", round(best_param_value$RMSE, 4)))
print(paste("The R^2 value for lasso model on the train set", round(best_param_value$Rsquared, 4)))
print(paste("The RMSE value for lasso model on the test set", round(lasso_rmse, 4)))
print(paste("The R^2 value for lasso model on the test set", round(lasso_R2, 4)))
